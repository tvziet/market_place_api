openapi: 3.0.0
info:
  title: Market Place API
  description: Market Place API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Development server
paths:
  /register:
    post:
      summary: Register a new user
      tags: ["authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorsResponse"
  /login:
    post:
      summary: Login
      tags: ["authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Unauthorized
        "404":
          description: The user was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /users/{id}:
    get:
      summary: Get an user by ID
      tags: ["users"]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: The user was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
    put:
      summary: Update an user
      tags: ["users"]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorsResponse"
    delete:
      summary: Delete an user
      tags: ["users"]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Successfully
        "404":
          description: The user was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /products:
    get:
      summary: Get all products
      tags: ["products"]
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListProductsResponse"
    post:
      summary: Create a new product
      tags: ["products"]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
      responses:
        "201":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorsResponse"
  /products/{id}:
    get:
      summary: Get a product by ID
      tags: ["products"]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "404":
          description: The product was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
    put:
      summary: Update a product
      tags: ["products"]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "403":
          description: Forbidden
        "422":
          description: Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorsResponse"
    delete:
      summary: Delete a product
      tags: ["products"]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Successfully
        "403":
          description: Forbidden
        "404":
          description: The product was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /orders:
    get:
      summary: Get all orders
      tags: ["orders"]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOrdersResponse"
    post:
      summary: Create a new order
      tags: ["orders"]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
      responses:
        "201":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "422":
          description: Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /orders/{id}:
    get:
      summary: Get an order by ID
      tags: ["orders"]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "404":
          description: The order was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
components:
  schemas:
    ErrorsResponse:
      type: object
      properties:
        errors:
          type: object

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    UserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
            type:
              type: string
            attributes:
              type: object
              properties:
                email:
                  type: string
            relationships:
              type: object
              properties:
                products:
                  type: object
                  properties:
                    data:
                      type: array

    TokenResponse:
      type: object
      properties:
        token:
          type: string

    ListProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              type:
                type: string
              attributes:
                type: object
                properties:
                  title:
                    type: string
                  price:
                    type: number
                    format: float
                  published:
                    type: boolean
              relationships:
                type: object

    ProductResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
            type:
              type: string
            attributes:
              type: object
              properties:
                title:
                  type: string
                price:
                  type: number
                  format: float
                published:
                  type: boolean
            relationships:
              type: object

    ListOrdersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              type:
                type: string
              attributes:
                type: object
                properties:
                  total:
                    type: number
                    format: float
              relationships:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                          type:
                            type: string
                  product:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            type:
                              type: string
        links:
          type: object
          properties:
            first:
              type: string
            last:
              type: string
            prev:
              type: string
            next:
              type: string

    OrderResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
            type:
              type: string
            relationships:
              type: object

    UserRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
            password:
              type: string

    ProductRequest:
      type: object
      properties:
        product:
          type: object
          properties:
            title:
              type: string
            price:
              type: number
            published:
              type: boolean

    OrderRequest:
      type: object
      properties:
        order:
          type: object
          properties:
            total:
              type: number
              format: float
            product_ids:
              type: array
              items:
                type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      name: "Authorization"
